// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Persistence.Data.Contexts;

#nullable disable

namespace eShop.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230104074138_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57fa1374-1566-47e7-b38c-67761d6f80b3"),
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(5448),
                            Name = "Smartphone",
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(5451)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f37954b-bcf5-4e9e-97e9-b71670226eea"),
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(5167),
                            Name = "John",
                            Surname = "Doe",
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(5170)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39973b5e-80b2-4a22-b02f-972805dbb74c"),
                            Address = "(217) 348-8633\r\n1418 6th St\r\nCharleston, Illinois(IL), 61920",
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(1786),
                            CustomerId = new Guid("6f37954b-bcf5-4e9e-97e9-b71670226eea"),
                            Description = "Iphone 11",
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(1800)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0aa90116-118a-4681-bfe7-fc778ea5408d"),
                            CategoryId = new Guid("57fa1374-1566-47e7-b38c-67761d6f80b3"),
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4793),
                            Description = "128 gb black",
                            Image = "iphone-11-black.jpg",
                            Name = "Iphone 11",
                            Price = 1399.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4799)
                        },
                        new
                        {
                            Id = new Guid("ed7f87fe-14b1-4071-adce-eaec17d4588e"),
                            CategoryId = new Guid("57fa1374-1566-47e7-b38c-67761d6f80b3"),
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4816),
                            Description = "64 gb white",
                            Image = "iphone-11-white.jpg",
                            Name = "Iphone 11",
                            Price = 1199.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4817)
                        },
                        new
                        {
                            Id = new Guid("2943329b-8cd0-4ee1-9ffc-d22cf298917f"),
                            CategoryId = new Guid("57fa1374-1566-47e7-b38c-67761d6f80b3"),
                            CreatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4853),
                            Description = "128 gb white",
                            Image = "iphone-11-white.jpg",
                            Name = "Iphone 11",
                            Price = 1399.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2023, 1, 4, 11, 41, 37, 913, DateTimeKind.Local).AddTicks(4854)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.ProductOrder", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("0aa90116-118a-4681-bfe7-fc778ea5408d"),
                            OrderId = new Guid("39973b5e-80b2-4a22-b02f-972805dbb74c")
                        },
                        new
                        {
                            ProductId = new Guid("ed7f87fe-14b1-4071-adce-eaec17d4588e"),
                            OrderId = new Guid("39973b5e-80b2-4a22-b02f-972805dbb74c")
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.ProductOrder", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.Concrete.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
