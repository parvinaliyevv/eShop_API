// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Persistence.Data.Contexts;

#nullable disable

namespace eShop.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221225172428_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8782db3e-95bb-4c89-a92f-d3e92b9dceff"),
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(6488),
                            Name = "Smartphone",
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(6491)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5dd54910-ae6a-439d-b85b-5034cf34de20"),
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(6179),
                            Name = "John",
                            Surname = "Doe",
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(6182)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b11eff0-3bb0-46be-8f5c-ee3e4e57cff5"),
                            Address = "(217) 348-8633\r\n1418 6th St\r\nCharleston, Illinois(IL), 61920",
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(3423),
                            CustomerId = new Guid("5dd54910-ae6a-439d-b85b-5034cf34de20"),
                            Description = "Iphone 11",
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(3434)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d074776-26b2-45ba-86c5-527cbf2c5297"),
                            CategoryId = new Guid("8782db3e-95bb-4c89-a92f-d3e92b9dceff"),
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5729),
                            Description = "128 gb black",
                            Name = "Iphone 11",
                            Price = 1399.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5733)
                        },
                        new
                        {
                            Id = new Guid("84d2c679-22d7-4e78-b477-284c3e062cdb"),
                            CategoryId = new Guid("8782db3e-95bb-4c89-a92f-d3e92b9dceff"),
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5746),
                            Description = "64 gb white",
                            Name = "Iphone 11",
                            Price = 1199.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5747)
                        },
                        new
                        {
                            Id = new Guid("c4628cfc-2421-45c1-a34e-568c8d7bd7e6"),
                            CategoryId = new Guid("8782db3e-95bb-4c89-a92f-d3e92b9dceff"),
                            CreatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5799),
                            Description = "128 gb white",
                            Name = "Iphone 11",
                            Price = 1399.0,
                            Stock = 50,
                            UpdatedDateTime = new DateTime(2022, 12, 25, 21, 24, 27, 859, DateTimeKind.Local).AddTicks(5802)
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.ProductOrder", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("3d074776-26b2-45ba-86c5-527cbf2c5297"),
                            OrderId = new Guid("1b11eff0-3bb0-46be-8f5c-ee3e4e57cff5")
                        },
                        new
                        {
                            ProductId = new Guid("84d2c679-22d7-4e78-b477-284c3e062cdb"),
                            OrderId = new Guid("1b11eff0-3bb0-46be-8f5c-ee3e4e57cff5")
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.ProductOrder", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Concrete.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.Concrete.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
